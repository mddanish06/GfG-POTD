// 🎉Decode the String🏆

// 👉Used stacks to decode nested encoded strings by tracking counts and substrings.
// 👉Processed characters sequentially to manage repetitions efficiently.
// 👉Time complexity: O(N).

class Solution {
    static String decodeString(String s) {
        // code here
        Stack<Integer> count = new Stack();
        Stack<String> res = new Stack();
        char[] arr = s.toCharArray();
        int i = 0, num = 0;
        String currString = "";
        
        while(i < s.length()){
            if(Character.isDigit(arr[i])){
                num = 0;
                while(Character.isDigit(arr[i])){
                    num = num*10+(arr[i] - '0');
                    i++;
                }
                count.push(num);
            }else if(arr[i] == '['){
                res.add(currString);
                currString = "";
                i++;
            }else if(arr[i] == ']'){
                int n = count.pop();
                StringBuilder sb = new StringBuilder(res.pop());
                for(int j=0; j<n; j++){
                    sb.append(currString);
                }
                currString = sb.toString();
                i++;
            }else{
                currString += arr[i];
                i++;
            }
        }
        return currString;
    }
}