// 🎉Edit Distance🏆

// Approach:
// 👉Used Dynamic Programming with memoization to efficiently compute the minimum edit distance.
// 👉Considered three operations: Insert, Remove, and Replace.
// 👉Time complexity: O(N * M).    

class Solution {    
    public int editDistance(String s1, String s2) {
        // Code here
        int n = s1.length();
        int m = s2.length();
        int[][] dp = new int[n+1][m+1];
        
        for(int[] row : dp) Arrays.fill(row, -1);
        return solve(s1, s2, n, m, dp);
    }
    
    int solve(String s1, String s2, int i, int j, int[][] dp){
        if(i == 0) return j;
        if(j == 0) return i;
        if(dp[i][j] != -1) return dp[i][j];
        if(s1.charAt(i-1) == s2.charAt(j-1)){
            return dp[i][j] = solve(s1, s2, i-1, j-1, dp);
        }
        
        int rem = solve(s1, s2, i-1, j, dp);
        int insert = solve(s1, s2, i, j-1, dp);
        int replace = solve(s1, s2, i-1, j-1, dp);
        
        return dp[i][j] = 1 + Math.min(rem, Math.min(insert, replace));
    }
}