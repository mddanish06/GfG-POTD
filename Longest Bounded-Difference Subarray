// 🎉Longest Bounded-Difference Subarray🏆

// 👉Used two deques to track the minimum and maximum values in the current window.
// 👉Adjusted the window size dynamically to maintain the absolute difference condition.
// 👉Time complexity: O(N).

class Solution{
    public ArrayList<Integer> longestSubarray(int[] arr, int x) {
        // code here
        int left = 0, right = 0, maxLength = 0, startIndex = 0;
        Deque<Integer> minDeque = new LinkedList<>();
        Deque<Integer> maxDeque = new LinkedList<>();
        
        while(right < arr.length){
            while(!maxDeque.isEmpty() && arr[maxDeque.peekLast()] <= arr[right]){
                maxDeque.pollLast();
            }
            maxDeque.addLast(right);
            
            while(!minDeque.isEmpty() && arr[minDeque.peekLast()] >= arr[right]){
                minDeque.pollLast();
            }
            minDeque.addLast(right);
            
            while(arr[maxDeque.peekFirst()] - arr[minDeque.peekFirst()] > x){
                left++;
                if(!maxDeque.isEmpty() && maxDeque.peekFirst() < left){
                    maxDeque.pollFirst();
                }
                if(!minDeque.isEmpty() && minDeque.peekFirst() < left){
                    minDeque.pollFirst();
                }
            }
            if(right - left + 1 > maxLength){
                maxLength = right - left + 1;
                startIndex = left;
            }
            right++;
        }
        ArrayList<Integer> res = new ArrayList<>();
        for(int i=startIndex; i<startIndex+maxLength; i++){
            res.add(arr[i]);
        }
        
        return res;
    }
}