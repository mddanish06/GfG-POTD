// 🎉Maximum of Minimum for Every Window Size 🏆

// Approach:
// 👉Used stacks to determine the next smaller element on both sides.
// 👉Calculated the window size dynamically and updated results accordingly.
// 👉Time complexity: O(N).

public ArrayList<Integer> maxOfMins(int[] arr) {
    // Your code here
    int n = arr.length;
    int[] left = new int[n];
    int[] right = new int[n];
    int[] result = new int[n + 1];
    
    Arrays.fill(left, -1);
    Arrays.fill(right, n);
    
    Stack<Integer> st = new Stack<>();
    
    for(int i=0; i<n; i++){
        while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
            st.pop();
        }
        if(!st.isEmpty()){
            left[i] = st.peek();
        }
        st.push(i);
    }
    
    st.clear();
    for(int i=n-1; i>=0; i--){
        while(!st.isEmpty() && arr[st.peek()] >= arr[i]){
            st.pop();
        }
        if(!st.isEmpty()){
            right[i] = st.peek();
        }
        st.push(i);
    }
    
    for(int i=0; i<n; i++){
        int windowSize = right[i] - left[i] - 1;
        result[windowSize] = Math.max(result[windowSize], arr[i]);
    }
    
    for(int i=n-1; i>=1; i--){
        result[i] = Math.max(result[i], result[i + 1]);
    }
    
    ArrayList<Integer> res = new ArrayList<>();
    for(int i=1; i<=n; i++){
        res.add(result[i]);
    }
    
    return res;
}